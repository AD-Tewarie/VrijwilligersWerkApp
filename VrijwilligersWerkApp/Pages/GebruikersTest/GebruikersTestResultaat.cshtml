@page
@model VrijwilligersWerkApp.Pages.GebruikersTest.GebruikersTestResultaatModel

<div class="container mt-4">
    <h2>Test Resultaten</h2>

    @if (!string.IsNullOrEmpty(Model.SuccesMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @Model.SuccesMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @Model.ErrorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <!-- Categorie Scores -->
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h4 class="card-title mb-0">Scores per Categorie</h4>
                </div>
                <div class="card-body p-0">
                    <ul class="list-group list-group-flush">
                        @foreach (var score in Model.ResultaatModel.CategorieScores.OrderByDescending(s => s.Score))
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @score.CategorieNaam
                                <span class="badge bg-primary rounded-pill">@score.Score%</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <!-- Presentatie type selector -->
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h4 class="card-title mb-0">Weergave Opties</h4>
                </div>
                <div class="card-body">
                    <div class="btn-group w-100 mb-3" role="group">
                        <button type="button" onclick="updatePresentationType('top')"
                            class="btn @(Model.ResultaatModel.HuidigePresentatieType == "top" ? "btn-primary" : "btn-outline-primary")"
                            data-bs-toggle="tooltip" data-bs-placement="top"
                            title="Toon de 5 beste matches">
                            Top 5
                        </button>
                        <button type="button" onclick="updatePresentationType('minimum')"
                            class="btn @(Model.ResultaatModel.HuidigePresentatieType == "minimum" ? "btn-primary" : "btn-outline-primary")"
                            data-bs-toggle="tooltip" data-bs-placement="top"
                            title="Toon alle matches boven de geselecteerde minimum score">
                            Boven Minimum
                        </button>
                        <button type="button" onclick="updatePresentationType('alle')"
                            class="btn @(Model.ResultaatModel.HuidigePresentatieType == "alle" ? "btn-primary" : "btn-outline-primary")"
                            data-bs-toggle="tooltip" data-bs-placement="top"
                            title="Toon alle matches met een relevante score (20% of hoger)">
                            Alle Relevante
                        </button>
                    </div>

                    <div class="mb-3 @(Model.ResultaatModel.HuidigePresentatieType != "minimum" ? "d-none" : "")" id="scoreSlider">
                        <label for="minimumScore" class="form-label">Minimale Match Score:</label>
                        <div class="d-flex align-items-center">
                            <input type="range" class="form-range" id="minimumScore" min="20" max="100"
                                   value="@(Request.Query["minimumScore"].ToString() ?? "20")"
                                   oninput="updateScoreDisplay(this.value)"
                                   onchange="updateScore(this.value)">
                            <span id="scoreValue" class="ms-2">@(Request.Query["minimumScore"].ToString() ?? "20")%</span>
                        </div>
                        <small class="text-muted">Minimale relevantie drempel is 20%</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Aanbevolen Werk -->
        <div class="col-md-8" id="aanbevolenWerkContainer">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="card-title mb-0">Aanbevolen Vrijwilligerswerk</h4>
                </div>
                <div class="card-body">
                    @if (Model.ResultaatModel.AanbevolenWerk != null && Model.ResultaatModel.AanbevolenWerk.Any())
                    {
                        foreach (var werk in Model.ResultaatModel.AanbevolenWerk)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <h5 class="card-title mb-0">@werk.Titel</h5>
                                        <span class="badge bg-info">Match: @werk.MatchPercentage%</span>
                                    </div>
                                    <p class="card-text">@werk.Omschrijving</p>
                                    <form method="post" asp-page-handler="RegistreerVoorWerk">
                                        <input type="hidden" name="werkId" value="@werk.WerkId" />
                                        <button type="submit" class="btn btn-primary">Aanmelden</button>
                                    </form>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-info">
                            Geen aanbevolen werk gevonden voor de huidige selectie.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="text-center mt-4">
        <form method="post" asp-page-handler="NieuweTest" class="d-inline">
            <button type="submit" class="btn btn-warning">Test Opnieuw Maken</button>
        </form>
        <a href="/Home" class="btn btn-secondary ms-2">Terug naar Home</a>
    </div>
</div>

@section Scripts {
    <script>
        function updateScoreDisplay(value) {
            document.getElementById('scoreValue').textContent = value + '%';
        }

        function updateScore(value) {
            const currentType = document.querySelector('.btn-group .btn-primary').textContent.trim().toLowerCase();
            const presentationType =
                currentType === 'top 5' ? 'top' :
                currentType === 'boven minimum' ? 'minimum' : 'alle';
            updateResults(presentationType, value);
        }

        function updatePresentationType(type) {
            const score = document.getElementById('minimumScore').value;
            const scoreSlider = document.getElementById('scoreSlider');
            
            
            if (type === 'minimum') {
                scoreSlider.classList.remove('d-none');
            } else {
                scoreSlider.classList.add('d-none');
            }
            
            updateResults(type, score);
        }

        function updateResults(presentatieType, minimumScore) {
            const url = new URL(window.location.href);
            url.searchParams.set('presentatieType', presentatieType);
            url.searchParams.set('minimumScore', minimumScore);

            fetch(url.toString())
                .then(response => response.text())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    
                    // Update the aanbevolen werk section
                    const newContent = doc.querySelector('#aanbevolenWerkContainer');
                    if (newContent) {
                        document.querySelector('#aanbevolenWerkContainer').innerHTML = newContent.innerHTML;
                    }

                    // Update presentation type buttons
                    const buttons = document.querySelectorAll('.btn-group .btn');
                    buttons.forEach(button => {
                        const buttonText = button.textContent.trim().toLowerCase();
                        const isActive =
                            (presentatieType === 'top' && buttonText === 'top 5') ||
                            (presentatieType === 'minimum' && buttonText === 'boven minimum') ||
                            (presentatieType === 'alle' && buttonText === 'alle relevante');
                            
                        if (isActive) {
                            button.classList.remove('btn-outline-primary');
                            button.classList.add('btn-primary');
                        } else {
                            button.classList.remove('btn-primary');
                            button.classList.add('btn-outline-primary');
                        }
                    });

                    // Update score slider visibility
                    const scoreSlider = document.getElementById('scoreSlider');
                    if (scoreSlider) {
                        if (presentatieType === 'minimum') {
                            scoreSlider.classList.remove('d-none');
                        } else {
                            scoreSlider.classList.add('d-none');
                        }
                    }

                    // Update URL without page reload
                    window.history.pushState({}, '', url.toString());
                })
                .catch(error => {
                    console.error('Error updating results:', error);
                });
        }

        // Initialize tooltips
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

        // Prevent form resubmission on page refresh
        if (window.history.replaceState) {
            window.history.replaceState(null, null, window.location.href);
        }
    </script>
}
